labs(x = "Group", y = "Glabellar curevature (unitless)")
ggsave(filename = './results/supplementary_analyses/Glabellar curvature values.svg',device = 'svg',
width = 10,height = 8)
calvarium_sup = filter(calvarium_sup,!is.na(calvarium_sup$Glabella_concavity_Ni))
new_order = c('deep','shallow','absent')
calvarium_sup$Glabella_concavity_Ni <- factor(calvarium_sup$Glabella_concavity_Ni, levels = new_order)
ggplot(calvarium_sup,
aes(x = Glabella_concavity_Ni,
y = NewK))+
geom_boxplot()+
theme(panel.background = element_blank(),
axis.line = element_line(color = "black"),
axis.text.x = element_text(size = 12),
axis.title = element_text(size = 15))+  # Remove background
guides(color = FALSE)+
scale_y_continuous(breaks = c(round(min(calvarium_sup$NewK),digits = 3), round(max(calvarium_sup$NewK),3)),
labels = c(round(min(calvarium_sup$NewK),digits = 3), round(max(calvarium_sup$NewK),3))) +
scale_color_manual(values = group_colors)+
labs(x = "Glbaella concavity (taken from Ni et al. 2021)", y = "Glabellar curevature (unitless)")
ggsave(filename = './results/supplementary_analyses/Glabellar curvature validation.svg',device = 'svg',
width = 10,height = 8)
model = kruskal.test(NewK ~ Glabella_concavity_Ni,
data = calvarium_sup)
print(model)
dunnTest(NewK ~ Glabella_concavity_Ni,method = 'bh',
data = calvarium_sup)
calvarium_lat = calvarium %>%
#filter(intact_yes_no == 'yes' & intact_yes_no.1 == 'yes')%>%
filter(!Name_in_image == 'STW53')  #not homo erectus
calvarium_lat$flatness_error_SD = scale(calvarium_lat$SkFltnsCS_Diff)[,1]
calvarium_lat$flatness_outliers = abs(calvarium_lat$flatness_error_SD)>2
calvarium_lat$forehead_error_SD = scale(calvarium_lat$FhTYDiff_Diff)[,1]
calvarium_lat$forehead_outliers = abs(calvarium_lat$FhTYDiff_Diff)>2
# Calc corr and P val
flatness_data = calvarium_lat %>%
filter(!flatness_outliers)
SkFltnsCS_cor = cor(flatness_data$SkFltnsCS, flatness_data$SkFltnsCS.1, method = 'pearson')
SkFltnsCS_cor_test <- cor.test(flatness_data$SkFltnsCS, flatness_data$SkFltnsCS.1, method = 'pearson')
# Plot the clean data:
ggplot(flatness_data, aes(x = SkFltnsCS, y = SkFltnsCS.1, color = group)) +
geom_abline(intercept = 0, slope = 1, color = "grey", linewidth = 1) +
geom_point() +
geom_text_repel(aes(label = Name_in_graph),max.overlaps = Inf) +
theme(panel.background = element_blank(),
axis.line = element_line(color = "black"),
axis.title = element_text(size = 15)) +
labs(x = "Calvarial flatness in left view (unitless)", y = "Calvarial flatness in right view (unitless)")+
scale_color_manual(values = group_colors)+
guides(color = NULL)
# Filter out Homo erectus specimen
calvarium_lat <- calvarium %>%
filter(Name_in_image != 'STW53')
# Identify outliers
calvarium_lat <- calvarium_lat %>%
mutate(
flatness_error_SD = scale(SkFltnsCS_Diff)[, 1],
flatness_outliers = abs(flatness_error_SD) > 2,
forehead_error_SD = scale(FhTYDiff_Diff)[, 1],
forehead_outliers = abs(forehead_error_SD) > 2
)
# Analyze calvarial flatness
flatness_data <- filter(calvarium_lat, !flatness_outliers)
SkFltnsCS_cor <- cor(flatness_data$SkFltnsCS, flatness_data$SkFltnsCS.1)
SkFltnsCS_cor_test <- cor.test(flatness_data$SkFltnsCS, flatness_data$SkFltnsCS.1)
# Plot calvarial flatness
ggplot(flatness_data, aes(x = SkFltnsCS, y = SkFltnsCS.1, color = group)) +
geom_abline(slope = 1, intercept = 0, color = "grey", linewidth = 1) +
geom_point() +
geom_text_repel(aes(label = Name_in_graph), max.overlaps = Inf) +
scale_color_manual(values = group_colors) +
theme_minimal(base_size = 15) +
theme(axis.line = element_line(color = "black")) +
labs(
x = "Calvarial flatness (left view, unitless)",
y = "Calvarial flatness (right view, unitless)"
) +
guides(color = "none")
calvarium_sup = filter(calvarium_sup,!is.na(calvarium_sup$Glabella_concavity_Ni))
# Load packages
library(dplyr)
source("C:/Users/NadavMi/Weizmann Institute Dropbox/Nadav Mishol/East Asian Skulls Project/Repository/scripts/cranial_matching_statistics.R")
full_craniometric_data <- read.csv(
'./data/craniometric_data.csv',
colClasses = c('character', 'factor', rep('numeric', 324))
)
GF.mat = full_craniometric_data
GF.mat$specimen = fix.names(GF.mat$specimen)
source('./scripts/functions.R')
GF.mat$specimen = fix.names(GF.mat$specimen)
GF.mat$group = as.character(GF.mat$group)
GF.mat[GF.mat$group %in% c('EHS','UPS'),'group'] = 'AMH'
full_craniometric_data <- read.csv(
'./data/craniometric_data.csv',
colClasses = c('character', 'factor', rep('numeric', 324))
)
source('./scripts/functions.R')
GF.mat = full_craniometric_data
GF.mat$specimen = fix.names(GF.mat$specimen)
GF.mat$group = as.character(GF.mat$group)
GF.mat[GF.mat$group %in% c('EHS','UPS'),'group'] = 'AMH'
GF.mat[GF.mat$group %in% c('ERC_EP','ERC_MP'),'group'] = 'ERC'
GF.mat[GF.mat$group %in% c('LMPEA','MPH'),'group'] = 'MPH'
GF.mat$group = as.factor(GF.mat$group)
GF.mat$group = factor(GF.mat$group, levels=c("MPH", "NE","ERC", "AMH","HOMO","ANT"))
View(GF.mat)
full_craniometric_data <- read.csv(
'./data/craniometric_data.csv',
colClasses = c('character', 'factor', rep('numeric', 324))
)
source('./scripts/functions.R')
GF.mat = full_craniometric_data
GF.mat$specimen = fix.names(GF.mat$specimen)
GF.mat$group = as.character(GF.mat$group)
GF.mat[GF.mat$group %in% c('EHS','UPS'),'group'] = 'AMH'
GF.mat[GF.mat$group %in% c('ERC_EP','ERC_MP'),'group'] = 'ERC'
GF.mat[GF.mat$group %in% c('LMPEA','MPH'),'group'] = 'MPH'
GF.mat$group = as.factor(GF.mat$group)
GF.mat$group = factor(GF.mat$group, levels=c("MPH", "NE","ERC", "AMH","HOMO","ANT"))
GF.mat = filter(GF.mat,group%in%c("MPH", "NE","ERC", "AMH",NA))%>%
slice(-c(1,2)) #Remove first two metadata rows
group_colors <- c("AMH" = '#3B94D1', "NE" = '#FBB040', "ERC" = "forestgreen", "MPH" = "red")
ggplot(GF.mat,
aes(x = group,
y = mandibular_fossa_area.neu,
color = group))+
geom_boxplot(data = filter(GF.mat,!group == 'MPH'))+
geom_point()+
geom_text_repel(data = filter(GF.mat,group == 'MPH'),aes(label = specimen),hjust = "left",nudge_x = 0.05,
direction = 'y',min.segment.length = 0)+
#geom_text(aes(label = specimen),hjust = "left",nudge_x = 0.05)+
scale_color_manual(values = group_colors)+
theme(panel.background = element_blank(),
axis.text = element_text(size = 12),
axis.title = element_text(size = 15))+  # Remove background
scale_y_continuous(breaks = c(round(min(GF.mat$mandibular_fossa_area.neu),digits = 4), round(max(GF.mat$mandibular_fossa_area.neu),4)),
labels = c(round(min(GF.mat$mandibular_fossa_area.neu),digits = 4), round(max(GF.mat$mandibular_fossa_area.neu),4))) +
guides(color = FALSE)+
scale_x_discrete(labels = c("Neanderthals", "H. erectus",  "AMHs",'Middle Pleistocene Homo')) +
labs(x = "Group", y = expression("Glenoid fossa area (cm"^2*")"))
full_craniometric_data <- read.csv(
'./../craniometric_data.csv',
colClasses = c('character', 'factor', rep('numeric', 324))
)
write.csv(mat,file = './../processed_craniometric_data.csv')
# Visualization & Plotting
library(ggrepel)     # For over-crowded labels
library(ggfortify)   # PCA visualization using ggplot2
library(ggalt)       # Alternative PCA plotting functions
library(ggforce)     # Enhanced geoms for ggplot2 (e.g., for PCA)
library(ggimage)     # Insert images into ggplot
library(ggExtra)     # Add marginal histograms/densities to ggplot
library(ggpubr)      # Combine ggplots for publication
library(extrafont)   # Change fonts in ggplot
library(svglite)     # Save ggplots as SVG
library(rsvg)        # Convert SVG to PNG
# Statistics & Data Imputation
library(FactoMineR)  # PCA and multivariate analysis
library(missMDA)     # Impute missing values for multivariate data
library(coin)        # Permutation tests (e.g., Wilcoxon with ties)
library(MASS)        # LDA and other statistical methods
# Data Manipulation & Tidyverse
library(dplyr)
library(tidyr)
library(stringr)
library(purrr)
# Miscellaneous
library(parallel)    # Parallel processing
library(hash)        # Hash map object
library(readxl)      # Read Excel files
source('./scripts/functions.R')
# Load craniometric measurements
full_craniometric_data <- read.csv(
'./../craniometric_data.csv', #This data is processes raw data from Ni et al. 2021
colClasses = c('character', 'factor', rep('numeric', 324))
)
# Load phenotypic predictions
phenotype_predictions <- read.csv(
'./data/phenotypic_predictions.csv',  # or use: predictions_within_archaic_only.csv
colClasses = c(
rep('character', 3),
'factor',
'numeric',
rep('character', 3),
rep('factor', 2)
)
)
# Filter relevant predictions
phenotype_predictions <- phenotype_predictions %>%
filter(include.in.analysis == 'yes') %>%
filter(long.name != 'Symphysis height (id-gn).mandible')  # exclude mandibular measurement
FH_height_Oxy = TRUE          # Collect infor for Forehead height, Oxycephaly and glabellar protrusion
NAAPRA = TRUE                 # Collect the measurements used to estimate midfacial prognathism
malar_flatenning = TRUE       # Collect the measurements used to estimate malar flatenning
source('./scripts/combineDatasets.R')
malar = read_excel('./data/malar_flatenning_values.xlsx')
# process the data
malar = malar[order(malar$group),]%>%
rename(trimmedR = CurvRPAngFit1,trimmedL = CurvLPAngFit1)%>%
rename(RANSAC_R = CurvRPAngFit2,RANSAC_L = CurvLPAngFit2)%>%
rename(specimen = name_in_code)%>%
filter(include=='TRUE')%>%
filter(Gadi_name!='M676573_Harbin ventral')%>% #remove the original Harbin version #
#filter(Gadi_name!='M676573_Harbin_2_Edited')%>% #remove the additional Harbin version #
filter(!Gadi_name %in% c('M683591_Cro-Magnon II ventral','M684240_Qafzeh IX EM2027 ventral'))
malar = read_excel('./data/malar_flatenning_values.xlsx')
# process the data
malar = malar[order(malar$group),]%>%
rename(trimmedR = CurvRPAngFit1,trimmedL = CurvLPAngFit1)%>%
rename(RANSAC_R = CurvRPAngFit2,RANSAC_L = CurvLPAngFit2)%>%
rename(specimen = name_in_code)%>%
filter(include=='TRUE')%>%
filter(Gadi_name!='M676573_Harbin ventral')%>% #remove the original Harbin version #
#filter(Gadi_name!='M676573_Harbin_2_Edited')%>% #remove the additional Harbin version #
filter(!Gadi_name %in% c('M683591_Cro-Magnon II ventral','M684240_Qafzeh IX EM2027 ventral'))%>% # remove specimens where both sides are problematic
select(specimen,trimmedR,trimmedL)
malar = read_excel('./data/malar_flatenning_values.xlsx')
# process the data
malar = malar[order(malar$group),]%>%
rename(trimmedR = CurvRPAngFit1,trimmedL = CurvLPAngFit1)%>%
rename(RANSAC_R = CurvRPAngFit2,RANSAC_L = CurvLPAngFit2)%>%
rename(specimen = name_in_code)%>%
filter(include=='TRUE')%>%
filter(Gadi_name!='M676573_Harbin ventral')%>% #remove the original Harbin version #
#filter(Gadi_name!='M676573_Harbin_2_Edited')%>% #remove the additional Harbin version #
filter(!Gadi_name %in% c('M683591_Cro-Magnon II ventral','M684240_Qafzeh IX EM2027 ventral'))%>% # remove specimens where both sides are problematic
dplyr:select(specimen,trimmedR,trimmedL)
malar = read_excel('./data/malar_flatenning_values.xlsx')
# process the data
malar = malar[order(malar$group),]%>%
rename(trimmedR = CurvRPAngFit1,trimmedL = CurvLPAngFit1)%>%
rename(RANSAC_R = CurvRPAngFit2,RANSAC_L = CurvLPAngFit2)%>%
rename(specimen = name_in_code)%>%
filter(include=='TRUE')%>%
filter(Gadi_name!='M676573_Harbin ventral')%>% #remove the original Harbin version #
#filter(Gadi_name!='M676573_Harbin_2_Edited')%>% #remove the additional Harbin version #
filter(!Gadi_name %in% c('M683591_Cro-Magnon II ventral','M684240_Qafzeh IX EM2027 ventral'))%>% # remove specimens where both sides are problematic
dplyr::select(specimen,trimmedR,trimmedL)
# Visualization & Plotting
library(ggrepel)     # For over-crowded labels
library(ggfortify)   # PCA visualization using ggplot2
library(ggalt)       # Alternative PCA plotting functions
library(ggforce)     # Enhanced geoms for ggplot2 (e.g., for PCA)
library(ggimage)     # Insert images into ggplot
library(ggExtra)     # Add marginal histograms/densities to ggplot
library(ggpubr)      # Combine ggplots for publication
library(extrafont)   # Change fonts in ggplot
library(svglite)     # Save ggplots as SVG
library(rsvg)        # Convert SVG to PNG
# Statistics & Data Imputation
library(FactoMineR)  # PCA and multivariate analysis
library(missMDA)     # Impute missing values for multivariate data
library(coin)        # Permutation tests (e.g., Wilcoxon with ties)
library(MASS)        # LDA and other statistical methods
# Data Manipulation & Tidyverse
library(dplyr)
library(tidyr)
library(stringr)
library(purrr)
# Miscellaneous
library(parallel)    # Parallel processing
library(hash)        # Hash map object
library(readxl)      # Read Excel files
source('./scripts/functions.R')
# Load craniometric measurements
full_craniometric_data <- read.csv(
'./../craniometric_data.csv', #This data is processes raw data from Ni et al. 2021
colClasses = c('character', 'factor', rep('numeric', 324))
)
# Load phenotypic predictions
phenotype_predictions <- read.csv(
'./data/phenotypic_predictions.csv',  # or use: predictions_within_archaic_only.csv
colClasses = c(
rep('character', 3),
'factor',
'numeric',
rep('character', 3),
rep('factor', 2)
)
)
# Filter relevant predictions
phenotype_predictions <- phenotype_predictions %>%
filter(include.in.analysis == 'yes') %>%
filter(long.name != 'Symphysis height (id-gn).mandible')  # exclude mandibular measurement
FH_height_Oxy = TRUE          # Collect infor for Forehead height, Oxycephaly and glabellar protrusion
NAAPRA = TRUE                 # Collect the measurements used to estimate midfacial prognathism
malar_flatenning = TRUE       # Collect the measurements used to estimate malar flatenning
source('./scripts/combineDatasets.R')
# Visualization & Plotting
library(ggrepel)     # For over-crowded labels
library(ggfortify)   # PCA visualization using ggplot2
library(ggalt)       # Alternative PCA plotting functions
library(ggforce)     # Enhanced geoms for ggplot2 (e.g., for PCA)
library(ggimage)     # Insert images into ggplot
library(ggExtra)     # Add marginal histograms/densities to ggplot
library(ggpubr)      # Combine ggplots for publication
library(extrafont)   # Change fonts in ggplot
library(svglite)     # Save ggplots as SVG
library(rsvg)        # Convert SVG to PNG
# Statistics & Data Imputation
library(FactoMineR)  # PCA and multivariate analysis
library(missMDA)     # Impute missing values for multivariate data
library(coin)        # Permutation tests (e.g., Wilcoxon with ties)
library(MASS)        # LDA and other statistical methods
# Data Manipulation & Tidyverse
library(dplyr)
library(tidyr)
library(stringr)
library(purrr)
# Miscellaneous
library(parallel)    # Parallel processing
library(hash)        # Hash map object
library(readxl)      # Read Excel files
source('./scripts/functions.R')
# Load craniometric measurements
full_craniometric_data <- read.csv(
'./../craniometric_data.csv', #This data is processes raw data from Ni et al. 2021
colClasses = c('character', 'factor', rep('numeric', 324))
)
# Load phenotypic predictions
phenotype_predictions <- read.csv(
'./data/phenotypic_predictions.csv',  # or use: predictions_within_archaic_only.csv
colClasses = c(
rep('character', 3),
'factor',
'numeric',
rep('character', 3),
rep('factor', 2)
)
)
# Filter relevant predictions
phenotype_predictions <- phenotype_predictions %>%
filter(include.in.analysis == 'yes') %>%
filter(long.name != 'Symphysis height (id-gn).mandible')  # exclude mandibular measurement
FH_height_Oxy = TRUE          # Collect infor for Forehead height, Oxycephaly and glabellar protrusion
NAAPRA = TRUE                 # Collect the measurements used to estimate midfacial prognathism
malar_flatenning = TRUE       # Collect the measurements used to estimate malar flatenning
source('./scripts/combineDatasets.R')
# Add suffix '.neu' to neurocranial measurements (row 1 == 1)
neuro_cols <- names(full_craniometric_data)[as.vector(full_craniometric_data[1, ] == 1)]
neuro_cols <- neuro_cols[!is.na(neuro_cols)]
new_neuro_cols <- paste(neuro_cols, "neu", sep = ".")
full_craniometric_data <- full_craniometric_data %>%
rename_with(~ new_neuro_cols, all_of(neuro_cols))
# Add suffix '.vis' to viscerocranial measurements (row 1 == 2)
viscero_cols <- names(full_craniometric_data)[as.vector(full_craniometric_data[1, ] == 2)]
viscero_cols <- viscero_cols[!is.na(viscero_cols)]
new_viscero_cols <- paste(viscero_cols, "vis", sep = ".")
full_craniometric_data <- full_craniometric_data %>%
rename_with(~ new_viscero_cols, all_of(viscero_cols))
# Add suffix '.nm' to non-metric measurements (row 2 == 0)
nonmetric_cols <- names(full_craniometric_data)[as.vector(full_craniometric_data[2, ] == 0)]
nonmetric_cols <- nonmetric_cols[!is.na(nonmetric_cols)]
new_nonmetric_cols <- paste(nonmetric_cols, "nm", sep = ".")
full_craniometric_data <- full_craniometric_data %>%
rename_with(~ new_nonmetric_cols, all_of(nonmetric_cols))
# Add new levels to 'group' factor
levels(full_craniometric_data$group) <- c(levels(full_craniometric_data$group), 'ERC_MP', 'ERC_EP')
# Assign 'ERC_MP' (Middle Pleistocene) to selected specimens
mp_specimens <- c(
"peking_x", "peking_xiii", "peking_lii", "peking_rc_1996", "peking_dental",
"nanjing1", "hexian", "sambungmacan_1", "sambungmacan_3",
"ngandong_7", "ngandong_9", "ngandong_12", "sale"
)
full_craniometric_data$group[full_craniometric_data$specimen %in% mp_specimens] <- "ERC_MP"
# Assign 'ERC_EP' (Early Pleistocene) to selected specimens
ep_specimens <- c(
"sangiran_2", "sangiran17", "sangiran_dental",
"dmanisi_211_2282", "dmanisi_2280", "dmanisi_2700_2735", "dmanisi_4500_2600",
"knm_wt_15000", "er_3733", "er_3883"
)
full_craniometric_data$group[full_craniometric_data$specimen %in% ep_specimens] <- "ERC_EP"
# Add cranial base area column and mandibular fossa col
full_craniometric_data = full_craniometric_data %>%
mutate(cranial.base.elipse.neu = pi*AUB.neu*BNL.neu)%>% #Add Cranial base size area measurement
mutate(fossa_temp_s = 0.5*(Ectoglenoid.entoglenoid.lengt.neu +
Postglenoid.ectoglenoid.lengt.neu +
Postglenoid.entoglenoid.lengt.neu))%>%
mutate(mandibular_fossa_area.neu = sqrt(fossa_temp_s*
(fossa_temp_s-Ectoglenoid.entoglenoid.lengt.neu)*
(fossa_temp_s-Postglenoid.ectoglenoid.lengt.neu)*
(fossa_temp_s-Postglenoid.entoglenoid.lengt.neu)))%>%
dplyr::select(-fossa_temp_s)
# Fix values for the first two rows
full_craniometric_data[c(1,2),'cranial.base.elipse.neu'] = c(1,1)
full_craniometric_data[c(1,2),'mandibular_fossa_area.neu'] = c(1,1)
# Keep only specimens with a cranium
mat <- full_craniometric_data %>%
filter(cranium %in% c(NA, 1))
# Exclude broad categories not used in analysis
mat <- mat %>%
filter(!group %in% c('HOMO', 'HABILIS', 'ANT'))
# Exclude specific specimens with documented issues:
# - knm_wt_15000 (Turkana boy): subadult
# - bodo, ternifine_4: predate archaic divergence
# - oase: known hybrid
mat <- mat %>%
filter(!specimen %in% c('turkana', 'bodo', 'ternifine_4', 'oase'))
write.csv(mat,file = './../processed_craniometric_data.csv')
full_craniometric_data <- read.csv(
'./data/processed_craniometric_data.csv')
full_craniometric_data <- read.csv(
'./../processed_craniometric_data.csv')
source('./scripts/functions.R')
GF.mat = full_craniometric_data
GF.mat$specimen = fix.names(GF.mat$specimen)
GF.mat$group = as.character(GF.mat$group)
GF.mat[GF.mat$group %in% c('EHS','UPS'),'group'] = 'AMH'
GF.mat[GF.mat$group %in% c('ERC_EP','ERC_MP'),'group'] = 'ERC'
GF.mat[GF.mat$group %in% c('LMPEA','MPH'),'group'] = 'MPH'
GF.mat$group = as.factor(GF.mat$group)
GF.mat$group = factor(GF.mat$group, levels=c("MPH", "NE","ERC", "AMH","HOMO","ANT"))
GF.mat = filter(GF.mat,group%in%c("MPH", "NE","ERC", "AMH",NA))%>%
slice(-c(1,2)) #Remove first two metadata rows
ggplot(GF.mat,
aes(x = group,
y = mandibular_fossa_area.neu,
color = group))+
geom_boxplot(data = filter(GF.mat,!group == 'MPH'))+
geom_point()+
geom_text_repel(data = filter(GF.mat,group == 'MPH'),aes(label = specimen),hjust = "left",nudge_x = 0.05,
direction = 'y',min.segment.length = 0)+
#geom_text(aes(label = specimen),hjust = "left",nudge_x = 0.05)+
scale_color_manual(values = group_colors)+
theme(panel.background = element_blank(),
axis.text = element_text(size = 12),
axis.title = element_text(size = 15))+  # Remove background
scale_y_continuous(breaks = c(round(min(GF.mat$mandibular_fossa_area.neu),digits = 4), round(max(GF.mat$mandibular_fossa_area.neu),4)),
labels = c(round(min(GF.mat$mandibular_fossa_area.neu),digits = 4), round(max(GF.mat$mandibular_fossa_area.neu),4))) +
guides(color = FALSE)+
scale_x_discrete(labels = c("Neanderthals", "H. erectus",  "AMHs",'Middle Pleistocene Homo')) +
labs(x = "Group", y = expression("Glenoid fossa area (cm"^2*")"))
full_craniometric_data <- read.csv(
'./../processed_craniometric_data.csv')
source('./scripts/functions.R')
GF.mat = full_craniometric_data
GF.mat$specimen = fix.names(GF.mat$specimen)
GF.mat$group = as.character(GF.mat$group)
GF.mat[GF.mat$group %in% c('EHS','UPS'),'group'] = 'AMH'
GF.mat[GF.mat$group %in% c('ERC_EP','ERC_MP'),'group'] = 'ERC'
GF.mat[GF.mat$group %in% c('LMPEA','MPH'),'group'] = 'MPH'
GF.mat$group = as.factor(GF.mat$group)
GF.mat$group = factor(GF.mat$group, levels=c("MPH", "NE","ERC", "AMH","HOMO","ANT"))
GF.mat = filter(GF.mat,group%in%c("MPH", "NE","ERC", "AMH",NA))%>%
slice(-c(1,2)) #Remove first two metadata rows
ggplot(GF.mat,
aes(x = group,
y = mandibular_fossa_area.neu,
color = group))+
geom_boxplot(data = filter(GF.mat,!group == 'MPH'))+
geom_point()+
geom_text_repel(data = filter(GF.mat,group == 'MPH'),aes(label = specimen),hjust = "left",nudge_x = 0.05,
direction = 'y',min.segment.length = 0)+
scale_color_manual(values = group_colors)+
theme(panel.background = element_blank(),
axis.text = element_text(size = 12),
axis.title = element_text(size = 15))+  # Remove background
scale_y_continuous(breaks = c(round(min(GF.mat$mandibular_fossa_area.neu),digits = 4), round(max(GF.mat$mandibular_fossa_area.neu),4)),
labels = c(round(min(GF.mat$mandibular_fossa_area.neu),digits = 4), round(max(GF.mat$mandibular_fossa_area.neu),4))) +
guides(color = FALSE)+
scale_x_discrete(labels = c("Neanderthals", "H. erectus",  "AMHs",'Middle Pleistocene Homo')) +
labs(x = "Group", y = expression("Glenoid fossa area (cm"^2*")"))
ggsave(filename = './results/glenoid fossa size by group supplementary.svg',device = 'svg',
path = 'final graphs after revision',
width = 10,height = 8)
full_craniometric_data <- read.csv(
'./../processed_craniometric_data.csv')
source('./scripts/functions.R')
GF.mat = full_craniometric_data
GF.mat$specimen = fix.names(GF.mat$specimen)
GF.mat$group = as.character(GF.mat$group)
GF.mat[GF.mat$group %in% c('EHS','UPS'),'group'] = 'AMH'
GF.mat[GF.mat$group %in% c('ERC_EP','ERC_MP'),'group'] = 'ERC'
GF.mat[GF.mat$group %in% c('LMPEA','MPH'),'group'] = 'MPH'
GF.mat$group = as.factor(GF.mat$group)
GF.mat$group = factor(GF.mat$group, levels=c("MPH", "NE","ERC", "AMH","HOMO","ANT"))
GF.mat = filter(GF.mat,group%in%c("MPH", "NE","ERC", "AMH",NA))%>%
slice(-c(1,2)) #Remove first two metadata rows
ggplot(GF.mat,
aes(x = group,
y = mandibular_fossa_area.neu,
color = group))+
geom_boxplot(data = filter(GF.mat,!group == 'MPH'))+
geom_point()+
geom_text_repel(data = filter(GF.mat,group == 'MPH'),aes(label = specimen),hjust = "left",nudge_x = 0.05,
direction = 'y',min.segment.length = 0)+
scale_color_manual(values = group_colors)+
theme(panel.background = element_blank(),
axis.text = element_text(size = 12),
axis.title = element_text(size = 15))+  # Remove background
scale_y_continuous(breaks = c(round(min(GF.mat$mandibular_fossa_area.neu),digits = 4), round(max(GF.mat$mandibular_fossa_area.neu),4)),
labels = c(round(min(GF.mat$mandibular_fossa_area.neu),digits = 4), round(max(GF.mat$mandibular_fossa_area.neu),4))) +
guides(color = FALSE)+
scale_x_discrete(labels = c("Neanderthals", "H. erectus",  "AMHs",'Middle Pleistocene Homo')) +
labs(x = "Group", y = expression("Glenoid fossa area (cm"^2*")"))
ggsave(filename = './results/glenoid fossa size by group supplementary.svg',device = 'svg',
width = 10,height = 8)
ggsave(filename = './results/supplementary_analyses/glenoid fossa size by group supplementary.svg',device = 'svg',
width = 10,height = 8)
print_dir_tree <- function(path = ".", prefix = "") {
files <- list.files(path, full.names = TRUE)
for (i in seq_along(files)) {
name <- basename(files[i])
is_last <- i == length(files)
branch <- if (is_last) "└── " else "├── "
cat(prefix, branch, name, "\n", sep = "")
if (dir.exists(files[i])) {
new_prefix <- paste0(prefix, if (is_last) "    " else "│   ")
print_dir_tree(files[i], new_prefix)
}
}
}
print_dir_tree(getwd())
